#!/bin/bash -u
# Copyright 2015, 2016 Thomas Schatz, Xuan Nga Cao, Mathieu Bernard
#
# This file is part of abkhazia: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Abkhazia is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with abkahzia. If not, see <http://www.gnu.org/licenses/>.

# This is a kaldi recipe template for use with the abkhazia library.
# Its object is to:
#
# - prepare the data from an abkhazia/kaldi corpus
# - compute MFCC features
# - train a GMM-HMM model with triphone word-position-dependent states
#   and speaker adaptation

###### Parameters ######

# data directory in the recipe
name=@@@@

# language model directory in the recipe
lang=@@@@

# the acoustic model to train, can be 'mono', 'tri' or 'tri-sa',
# respectively for monophone, triphone and speaker adapted triphone
# acoustic models.
type=@@@@

# feature parameters
use_pitch=@@@@

# speaker-independent triphone models parameters
num_states_si=@@@@
num_gauss_si=@@@@

# speaker-adaptive triphone models parameters
num_states_sa=@@@@
num_gauss_sa=@@@@


###### Recipe ######

# assert type is valid
[[ ! ($type = "mono" || $type = "tri" || $type = "tri-sa") ]] && \
    echo "non valid acoustic model type: $type" && exit 1

[ -f cmd.sh ] && source ./cmd.sh \
        || echo "cmd.sh not found. Jobs may not execute properly."

. path.sh || { echo "Cannot source path.sh"; exit 1; }


# Features
mfccdir=mfcc
if [ "$use_pitch" = true ]
then
    make_feats="steps/make_mfcc_pitch.sh"
else
    make_feats="steps/make_mfcc.sh"
fi

echo "computing features with $make_feats"
for x in $name
do
    (
        $make_feats \
            --nj 20 --cmd "$train_cmd" data/$x \
            exp/make_mfcc/$x $mfccdir;
        steps/compute_cmvn_stats.sh \
            data/$x exp/make_mfcc/$x $mfccdir;
    ) &
done
wait;


# Monophone model training
# Flat start and monophone training, with delta-delta features.
# This script applies cepstral mean normalization (per speaker).
echo -n "training the monophone model (log in exp/mono/train.log)..."
mkdir -p exp/mono
steps/train_mono.sh \
    --nj 8 --cmd "$train_cmd" \
    data/$name $lang exp/mono \
    > exp/mono/train.log || exit 1
echo " done"

# monophone model training ends here
if [[  $type = 'mono' ]]
then
    echo 'computed acoustic model linked to exp/acoustic_model'
    ln -s $type exp/acoustic_model -v
    exit 0
fi


# Triphone model training

# Computes training alignments using a model with delta or
# LDA+MLLT features.
echo -n "force-aligning corpus with the monophone model (log in exp/mono_ali/align.log)..."
mkdir -p exp/mono_ali
steps/align_si.sh \
    --nj 8 --cmd "$train_cmd" \
    data/$name data/$lang exp/mono exp/mono_ali \
    > exp/mono_ali/align.log || exit 1
echo " done"

echo -n "training speaker-independant triphone model (log in exp/tri/train.log)..."
mkdir -p exp/tri
steps/train_deltas.sh \
    --cmd "$train_cmd" \
    $num_states_si $num_gauss_si \
    data/$name data/$lang exp/mono_ali exp/tri \
    > exp/tri/train.log || exit 1
echo "  done"

# triphone model training ends here
if [[  $type = 'tri' ]]
then
    echo 'computed acoustic model linked to exp/acoustic_model'
    ln -s $type exp/acoustic_model -v
    exit 0
fi


# Speaker adaptive triphone model training
echo -n "forced-aligning corpus with the triphone model (log in exp/tri_ali_fmllr/align.log)..."
mkdir -p exp/tri_ali_fmllr
steps/align_fmllr.sh \
    --nj 8 --cmd "$train_cmd" \
    data/$name data/$lang exp/tri exp/tri_ali_fmllr \
    > exp/tri_ali_fmllr/align.log || exit 1
echo " done"

echo -n "training speaker-adaptive triphone model (log in exp/tri-sa/train.log)..."
mkdir -p exp/tri-sa
steps/train_sat.sh \
    --cmd "$train_cmd" \
    $num_states_sa $num_gauss_sa \
    data/$name data/$lang exp/tri_ali_fmllr exp/tri-sa \
    > exp/tri-sa/train.log || exit 1
echo " done"

# speaker adapted triphone model training ends here
if [[  $type = 'tri-sa' ]]
then
    echo 'computed acoustic model linked to exp/acoustic_model'
    ln -s $type exp/acoustic_model -v
    exit 0
fi

exit 0
