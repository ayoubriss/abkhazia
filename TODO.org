* DNN branch
Implement dnn recipe on top of triphone speaker-adapted acoustic models
- [-] tester decode et sortir WER/PER sur les étapes du tri-sa et DNN
  - [X] mono, tri, tri-sa WER ok
  - [X] nnet ?
  - [ ] PER ?
- [ ] add nnet am/decode test
- [ ] debug the --transform-dir option for nnet decoding (need to be on
  top of align_fmllr?)
* Feature requests
** corpus
- [ ] des méthodes de stats sur les corpus (duration, per spks, etc)
- [ ] split with (p_train + p_test) < 1 (by now only =1 supported)
- [ ] need of a structure to append data to an existing corpus (eg
  attach a LM, features or manual alignments)

  From the Thomas version we want... Optionally, the corpus directory may contains:
   - Time-alignments (The previous files in the list are sufficient
     for training ASR models with kaldi, however for ABX experiments
     we also need time-alignments for each phone or each word. If they
     are not provided directly, a surrogate will be obtained through
     forced-alignment using the kaldi-trained ASR models)
   - A language model, either in OpenFST text or binary format or in
     ARPA-MIT N-gram format
   - Syllabification of each utterance
** features
- [ ] convertion ark to h5f is slow, can we do parallel ark to RAM, and
  sequential RAM to h5features?
** language
*** Where is the --prune-lexicon option ? --prune-lexicon false
Could be useful when using a lexicon that is tailored to the corpus
to the point of overfitting (i.e. only words occuring in the corpus
were included and many other common words weren't), which could lead
to overestimated performance on words from the lexicon appearing in
the test only. Removes from the lexicon all words that are not
present at least once in the training set.
** acoustic
   - [ ] --retrain option
     it should be possible to retrain a trained model on a new corpus
     (for instance, specifically retrain silence models, or retrain on a
     bunch of new corpus)
   - [ ] questions vs data-driven option (is it for tree building ?)
** documentation
  - [ ] have more detailed command description on 'abkhazia <command>
    --help'. Assume the user doesn't know abkhazia or kaldi.
  - [ ] improve the online documentation
    - [ ] install and configure
    - [ ] preparators for new corpora
    - [ ] ASR: LM, AM, features, alignment, etc
    - [ ] ABX: item files generation from alignment
  - [ ] add READMEs in intermediate directories of the project (or
    have a 'project organization' page)
** New specifications (0.4)
#+begin_src python
  corpus = BuckeyeCorpusPreparator('./buckeye').prepare()
  corpus.speakers()
  utt = corpus.utterances()

  train, _ = corpus.split(train_prop=0.5, by_speakers=True)
  train.save2h5('train.h5', group='corpus', wavs=True)
  corpus = Corpus.read('train.h5', group='corpus')

  lm = LanguageModelProcessor(order=3, level='word').compute(corpus)
  lm.save('lm.fst')
  lm.save2h5('train.h5', group='word-trigram')
  assert lm.order == 3
  assert lm.level == 'word'

  features = FeaturesProcessor('mfcc', delta=2, pitch=True).compute(corpus)
  f = features[utt[0]]  # np.array
  features.write2h5('train.h5', 'features')
  features.write2ark('/somewhere')
#+end_src
** Minor changes
*** TODO upgrade the bootphon/kaldi repo
*** TODO add cuda support in the install_kaldi.sh script
*** TODO in export use symlinks to save some place
    (file in output-dir, link in recipe-dir)
*** TODO updating abkhazia.cfg
    - Need of an automated way to update new versions of the installed
      configuration file in the ./configure script.
*** TODO adjust log level by detecting WARNING and ERROR from Kaldi messages
Those messages are actually logged in debug level, should be smater to be warnong/error
2016-10-12 16:33:58,372 - DEBUG - ERROR (apply-cmvn:Write():kaldi-matrix.cc:1229) Failed to write matrix to stream
2016-10-12 16:33:58,373 - DEBUG - WARNING (apply-cmvn:Write():util/kaldi-holder-inl.h:54) Exception caught writing Table object: ERROR (apply-cmvn:Write():kaldi-matrix.cc:1229) Failed to write matrix to stream
*** TODO Have completion setup during installation (or configuration?)
*** TODO Have a test_commands module for testing command line interface!
*** TODO Remove the wiki page on github, as we have now a readthedoc site
* Open bugs [0/4]
** TODO acoustic with delta features
*** problem
    Acoustic modeling fails when built on features with deltas. This is
    caused by bad features dimension.
*** solution
 - assert no delta in features in init (get back the dim or
 delta order from feat-to-dim ?)
 - OR split deltas from raw when computing features
** TODO acoustic mmonophone needs features with cmvn
   document it and make a test during recipe creation.
** TODO comments in config file
   'data-directory: #/something' actually creates the ./#/someting directory
** TODO align --post --with-words
   Update the probabilities estimation to be on words, not on phones
